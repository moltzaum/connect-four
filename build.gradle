
version = 'incubating'

apply plugin: "java"
apply plugin: "application"

task run_example {
    
    // default system is 'unix'
    // I would prefer to use "racket" and not build, but defining
    // the interpreter by default is not behavior I want.
    //def i1 = "racket"
    //def p1 = "connect-four-naive.rkt"
    //def i2 = "racket"
    //def p2 = "connect-four-naive.rkt"
    def i1 = ""
    def p1 = "./connect-four-naive"
    def i2 = ""
    def p2 = "./connect-four-naive"
    
    //build the examples?
    //dependsOn(build_examples)
    
    if (project.hasProperty('system')) {
        if (system == "windows") {
            i1 = "C:/Racket/Racket.exe"
            i2 = "C:/Racket/Racket.exe"
        } else if (system != "unix") {
            throw new GradleException("unrecognized system '" + system + "'")
        }
        if (project.hasProperty('interpreter_1')) i1 = interpreter_1
        if (project.hasProperty('interpreter_2')) i2 = interpreter_2
        if (project.hasProperty('program_1')) p1 = program_1
        if (project.hasProperty('program_2')) p2 = program_2
        
    } else {
        println "Cannot run example without specifying 'system' property."
        println "try: gradle -Psystem=unix run_example"
        return
    }
    
    run.args (
        "--interpreter-1", i1,
        "--program-1", p1,
        "--interpreter-2", i2,
        "--program-2", p2
    )
    finalizedBy(run)
}

sourceSets {
    main.java.srcDir "src/"
}

// Required for gradle run
mainClassName = "ConnectFour.Main"

// Where we fetch dependencies from
repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.8.5'
}

// Adding information to the jar file allows you to run:
// java -jar build/libs/connect-four-incubating.jar
jar.manifest.attributes(
    'Main-Class': mainClassName,
    'Class-Path': configurations.runtimeClasspath.files.collect { it.absolutePath }.join(' ')
)

